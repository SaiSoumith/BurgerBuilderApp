{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","onChangeHandler","event","id","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputIdentifier","setState","orderHandler","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","formElementsArray","key","this","push","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","url","component","input","inputElement","inputClasses","InputElement","Invalid","validationError","ValidationError","onChange","join","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.993c5561.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n          <h1>We hope it tastes well!</h1>\r\n           <div style={{width: '100%', margin: 'auto'}}>\r\n            <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>cancel </Button>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutContinued}>continue</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react'\r\nimport classes from './ContactData.module.css'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\n\r\nimport { updateObject,checkValidity} from '../../../shared/utility';\r\n\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Your Name'\r\n            },\r\n            value: '',\r\n            validation:{\r\n                required:true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        street: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Street'\r\n            },\r\n            value: '',\r\n            validation:{\r\n                required:true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        zipCode: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'ZIP Code'\r\n            },\r\n            value: '',\r\n            validation:{\r\n                required:true,\r\n                minLength:5,\r\n                maxLength:5,\r\n                isNumeric:true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        country: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Country'\r\n            },\r\n            value: '',\r\n            validation:{\r\n                required:true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Your E-Mail'\r\n            },\r\n            value: '',\r\n            validation:{\r\n                required:true,\r\n                isEmail: true\r\n            },\r\n            valid:false,\r\n            touched:false\r\n        },\r\n        deliveryMethod: {\r\n            elementType: 'select',\r\n            elementConfig: {\r\n                options: [\r\n                    {value: 'fastest', displayValue: 'Fastest'},\r\n                    {value: 'cheapest', displayValue: 'Cheapest'}\r\n                ]\r\n            },\r\n            value: 'fastest',\r\n            validation:{},\r\n            valid:true\r\n        }\r\n    },\r\n  \r\n    formIsValid:false\r\n}\r\n  \r\n\r\n\r\nonChangeHandler=(event,id)=>{\r\n\r\n  \r\n  const updatedFormElement = updateObject(this.state.orderForm[id], {\r\n    value: event.target.value,\r\n    valid: checkValidity(event.target.value, this.state.orderForm[id].validation),\r\n    touched: true\r\n});\r\n\r\n\r\n  const updatedOrderForm = updateObject(this.state.orderForm, {\r\n    [id]: updatedFormElement\r\n});\r\n\r\n  let formIsValid = true;\r\n  for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n  }\r\n  this.setState({\r\n    orderForm:updatedOrderForm,\r\n    formIsValid:formIsValid\r\n  })\r\n\r\n}\r\n  orderHandler=(event)=>{\r\n     event.preventDefault();\r\n     \r\n    // this.setState({loading:true})\r\n    const formData={};\r\n    for(let formElementIdentifier in this.state.orderForm){\r\n      formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;\r\n    }\r\n\r\n     const order={\r\n         ingredients:this.props.ings,\r\n         price:this.props.price,\r\n         orderData:formData,\r\n         userId:this.props.userId\r\n        //  customer: this.state\r\n            \r\n     }\r\n\r\n     this.props.onOrderBurger(order,this.props.token);\r\n     \r\n    // axios.post('./orders.json',order)\r\n    //   .then(response=>{\r\n    //     this.setState({loading:false})\r\n    //     this.props.history.push('/')\r\n    //    }\r\n    //     )\r\n    //   .catch(error=>\r\n    //     this.setState({loading:false})\r\n    //   )\r\n    //   alert('You continue!');\r\n  }\r\n    render() {\r\n\r\n\r\n      const formElementsArray=[];\r\n      for(let key in this.state.orderForm){\r\n        formElementsArray.push({\r\n             id:key,\r\n             config:this.state.orderForm[key]  \r\n        });\r\n      }\r\n\r\n        let form =( <form onSubmit={this.orderHandler}>\r\n            \r\n            {\r\n              formElementsArray.map(formElement=>(\r\n                <Input \r\n                     key={formElement.id}\r\n                     elementType={formElement.config.elementType}\r\n                     elementConfig={formElement.config.elementConfig}\r\n                     invalid={!formElement.config.valid}\r\n                     value={formElement.config.value}\r\n                     touched={formElement.config.touched}\r\n                     shouldValidate={formElement.config.validation}\r\n                     changed={(event)=>this.onChangeHandler(event,formElement.id)}/>))\r\n            }\r\n            <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n        \r\n    </form>)\r\n        if(this.props.loading)\r\n        form=<Spinner/>\r\n        return (\r\n            <div className={classes.ContactData}>\r\n            <h4>Enter Contact details</h4>\r\n              {\r\n                  form\r\n              }\r\n        </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps=(state)=>{\r\n\r\n  return{\r\n      ings:state.burgerBuilder.ingredients,\r\n      price:state.burgerBuilder.totalPrice,\r\n      loading:state.order.loading,\r\n      token:state.auth.token,\r\n      userId: state.auth.userId\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n\r\n  return{\r\n        onOrderBurger:(orderData,token)=>{dispatch(actions.purchaseBurger(orderData,token))}\r\n  }\r\n}\r\n\r\nexport default  connect( mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport {Route,Redirect} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData'\r\nimport {connect} from 'react-redux'\r\n\r\nclass Checkout extends Component {\r\n    // state = {\r\n    //     ingredients:{},          \r\n    //     totalPrice:0\r\n    // }\r\n\r\n    // componentDidMount(){\r\n        \r\n    //     const query=new URLSearchParams(this.props.location.search)\r\n    //     const ingredients={}\r\n    //     for(let param of query.entries())\r\n    //     {\r\n    //         if(param[0]==='price')\r\n    //         this.setState({totalPrice: +param[1]})\r\n    //         else\r\n    //         ingredients[param[0]]= +param[1]\r\n\r\n    //     }\r\n    //     this.setState({\r\n    //         ingredients:ingredients\r\n    //     })\r\n   \r\n    // }\r\n\r\n    checkoutCancelledHandler=()=>{\r\n       this.props.history.goBack();\r\n\r\n    }\r\n   \r\n    checkoutContinuedHandler=()=>{\r\n          this.props.history.replace('/checkout/contact-data')\r\n    }\r\n    render() {\r\n\r\n\r\n        let summary=<Redirect to='/'/>\r\n        if(this.props.ings)\r\n        { const purchasedRedirect=this.props.purchased ? <Redirect to=\"/\"/> :null\r\n            summary= (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler}/>\r\n                    <Route \r\n                        path={this.props.match.url+'/contact-data'} \r\n                        component={ContactData} />\r\n                </div>\r\n                );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps=(state)=>{\r\n\r\n    return{\r\n        ings:state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect( mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css'\r\nconst input = (props) => {\r\n   \r\n    let inputElement=null;\r\n   const inputClasses=[classes.InputElement]\r\n   if(props.invalid && props.shouldValidate && props.touched){\r\n       inputClasses.push(classes.Invalid)\r\n   }\r\n   let validationError = null;\r\n   if (props.invalid && props.touched) {\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\r\n   }  \r\n   switch(props.elementType){\r\n       case ('input'):\r\n           inputElement=<input\r\n                onChange={props.changed}  \r\n                className={inputClasses.join(' ') } \r\n                {...props.elementConfig} \r\n                value={props.value}/>\r\n           break;\r\n        case ('textarea'):\r\n            inputElement= <textarea\r\n                onChange={props.changed}  \r\n                className={inputClasses.join(' ') }\r\n                {...props.elementConfig} \r\n                value={props.value}/>\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (<select\r\n                onChange={props.changed}               \r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                >\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement=<input\r\n                onChange={props.changed}  \r\n                className={inputClasses.join(' ') }\r\n                {...props.elementConfig} \r\n                value={props.value}/>\r\n   }\r\n\r\n   \r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Jrr1C\",\"Label\":\"Input_Label__27ZQ-\",\"InputElement\":\"Input_InputElement__1XY2C\",\"Invalid\":\"Input_Invalid__2NcVG\",\"ValidationError\":\"Input_ValidationError__ZN4zB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3NgMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3Np5i\"};"],"sourceRoot":""}