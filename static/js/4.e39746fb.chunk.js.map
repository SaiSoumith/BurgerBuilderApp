{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","isSignUp","input","inputElement","inputClasses","InputElement","Invalid","validationError","ValidationError","onChange","join","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.e39746fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3FGhw\"};","import React, { Component } from 'react'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from'./Auth.module.css'\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from'../../components/UI/Spinner/Spinner'\r\nimport {Redirect} from 'react-router-dom'\r\nimport { updateObject,checkValidity} from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state={\r\n       controls:{\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your mail address'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Your password'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n       },\r\n       isSignup:true\r\n\r\n    }\r\n    \r\n    \r\n   componentDidMount(){\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n        this.props.onSetAuthRedirectPath();\r\n    }\r\n   }\r\n\r\n   \r\n   inputChangedHandler=(event,controlName)=>{\r\n       const updatedControls=updateObject(this.state.controls,\r\n        {[controlName]:updateObject(this.state.controls[controlName],{\r\n            value:event.target.value,\r\n            valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n            touched:true\r\n\r\n        })\r\n    })\r\n       this.setState({controls:updatedControls})\r\n\r\n   }\r\n\r\n   submitHandler=(event)=>{\r\n\r\n    event.preventDefault();\r\n    this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup)\r\n   }\r\n\r\n   switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n        return {isSignup: !prevState.isSignup};\r\n    });\r\n}\r\n    render() {\r\n        const formElementsArray=[];\r\n        for(let key in this.state.controls){\r\n          formElementsArray.push({\r\n               id:key,\r\n               config:this.state.controls[key]  \r\n          });\r\n        }\r\n\r\n        let form=formElementsArray.map(formElement=>(\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                invalid={!formElement.config.valid}\r\n                value={formElement.config.value}\r\n                touched={formElement.config.touched}\r\n                shouldValidate={formElement.config.validation}\r\n                changed={(event)=>this.inputChangedHandler(event,formElement.id)}\r\n            />\r\n        ));\r\n        if(this.props.loading)\r\n        {\r\n            form=<Spinner/>\r\n\r\n        }\r\n        let errorMessage=null;\r\n        if(this.props.error){\r\n            errorMessage=(\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n        let authRedirect=null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect=<Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                \r\n                <form onSubmit={this.submitHandler}>\r\n                   {form}\r\n                   <Button btnType=\"Success\">Submit</Button>\r\n                   \r\n                </form>\r\n                <Button \r\n                   clicked={this.switchAuthModeHandler}\r\n                   btnType=\"Danger\">Switch to {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n\r\n    return{\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n\r\n    return{\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n        onAuth:(email,password,isSignUp)=>dispatch(actions.auth(email,password,isSignUp))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from './Input.module.css'\r\nconst input = (props) => {\r\n   \r\n    let inputElement=null;\r\n   const inputClasses=[classes.InputElement]\r\n   if(props.invalid && props.shouldValidate && props.touched){\r\n       inputClasses.push(classes.Invalid)\r\n   }\r\n   let validationError = null;\r\n   if (props.invalid && props.touched) {\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\r\n   }  \r\n   switch(props.elementType){\r\n       case ('input'):\r\n           inputElement=<input\r\n                onChange={props.changed}  \r\n                className={inputClasses.join(' ') } \r\n                {...props.elementConfig} \r\n                value={props.value}/>\r\n           break;\r\n        case ('textarea'):\r\n            inputElement= <textarea\r\n                onChange={props.changed}  \r\n                className={inputClasses.join(' ') }\r\n                {...props.elementConfig} \r\n                value={props.value}/>\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (<select\r\n                onChange={props.changed}               \r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                >\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                        {option.displayValue}\r\n                    </option>\r\n                ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement=<input\r\n                onChange={props.changed}  \r\n                className={inputClasses.join(' ') }\r\n                {...props.elementConfig} \r\n                value={props.value}/>\r\n   }\r\n\r\n   \r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Jrr1C\",\"Label\":\"Input_Label__27ZQ-\",\"InputElement\":\"Input_InputElement__1XY2C\",\"Invalid\":\"Input_Invalid__2NcVG\",\"ValidationError\":\"Input_ValidationError__ZN4zB\"};"],"sourceRoot":""}